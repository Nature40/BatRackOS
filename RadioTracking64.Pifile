FROM https://downloads.raspberrypi.org/raspios_lite_arm64/images/raspios_lite_arm64-2020-08-24/2020-08-20-raspios-buster-arm64-lite.zip
PUMP 2000M

RUN apt-get update

# Install basic software
RUN apt-get install -y \
    python3 python3-pip \
    i2c-tools \
    vim \
    git \
    libusb-1.0-0-dev

# Install networking tools
RUN apt-get install -y \
    batctl \
    tcpdump \
    hostapd \
    dnsmasq \
    alfred \
    bridge-utils \
    hostapd

RUN pip3 install --upgrade pip

# Set default password
RUN bash -c 'echo "pi:natur" | chpasswd'

# Allow basic connectivity (0 == success status code - enable)
RUN raspi-config nonint do_serial 0
RUN raspi-config nonint do_ssh 0

# Install configuration files
INSTALL Base /

# Fix permissions on host ssh files
RUN bash -c 'chown root:root /etc/ssh/ssh_host_*'
RUN bash -c 'chmod 600 /etc/ssh/ssh_host_*_key'
RUN bash -c 'chmod 644 /etc/ssh/ssh_host_*_key.pub'
RUN systemctl disable regenerate_ssh_host_keys

# Install user ssh files and fix permissions
INSTALL Base/home/pi/.ssh /home/pi/.ssh
RUN chown pi:pi /home/pi
RUN chown pi:pi /home/pi/.ssh
RUN chown pi:pi /home/pi/.ssh/id_ed25519
RUN chown pi:pi /home/pi/.ssh/id_ed25519.pub
RUN chown pi:pi /home/pi/.ssh/authorized_keys
RUN chmod 755   /home/pi
RUN chmod 700   /home/pi/.ssh
RUN chmod 600   /home/pi/.ssh/id_ed25519
RUN chmod 644   /home/pi/.ssh/id_ed25519.pub
RUN chmod 644   /home/pi/.ssh/authorized_keys

# Install root ssh files and fix permissions
INSTALL Base/home/pi/.ssh /root/.ssh
RUN chown root:root /root
RUN chown root:root /root/.ssh
RUN chown root:root /root/.ssh/id_ed25519
RUN chown root:root /root/.ssh/id_ed25519.pub
RUN chown root:root /root/.ssh/authorized_keys
RUN chmod 755       /root
RUN chmod 700       /root/.ssh
RUN chmod 600       /root/.ssh/id_ed25519
RUN chmod 644       /root/.ssh/id_ed25519.pub
RUN chmod 644       /root/.ssh/authorized_keys

# Set Europe/Berlin timezone
RUN ln -sf /usr/share/zoneinfo/Europe/Berlin /etc/localtime 

# set git config for possible local commits
RUN git config --global user.email "root@nature40-sensorbox"
RUN git config --global user.name "Nature 4.0 Sensorbox"

# enable hostname-config script
RUN systemctl enable hostname-config.service

# Install and enable caddy
RUN curl -o /usr/bin/caddy "https://caddyserver.com/api/download?os=linux&arch=arm&arm=7"
RUN chmod +x /usr/bin/caddy
RUN groupadd --system caddy
RUN useradd --system \
    --gid caddy \
    --create-home \
    --home-dir /var/lib/caddy \
    --shell /usr/sbin/nologin \
    --comment "Caddy web server" \
    caddy
RUN systemctl enable caddy

# Install and enable sysdweb
RUN apt-get install -y \
    libsystemd-dev \
    libdbus-glib-1-dev \
    python3-dbus \
    python3-systemd \
    python3-bottle
RUN chown -R pi:pi /home/pi/
RUN pip3 install -e /home/pi/sysdweb
RUN systemctl enable sysdweb

# Create symlinks for other webserver targets
RUN mkdir -p /data
RUN chown pi:pi /data
RUN ln -s . /data/sysdweb
RUN ln -s /boot/ /data/boot

# Dump dmesg to disk
RUN systemctl enable dmesgdump

# Enable broadcast pings
RUN bash -c "echo net.ipv4.icmp_echo_ignore_broadcasts=0 | tee -a /etc/sysctl.conf"

# enable hostapd-config script
RUN systemctl enable adhoc-config.service
RUN systemctl enable hostapd-config.service
RUN systemctl enable hostapd.service

INSTALL RadioTracking /

RUN tee -a /etc/modprobe.d/raspi-blacklist.conf <<<'blacklist dvb_usb_rtl28xxu'

# Install radiotracking
RUN apt-get install -y \
    rtl-sdr \
    python3 \
    python3-pip \
    python3-numpy \
    python3-scipy \
    python3-paho-mqtt
RUN python3 -m pip install -e /home/pi/pyradiotracking
RUN cp /home/pi/pyradiotracking/etc/config.example.ini /boot/radiotracking.ini
RUN systemctl enable radiotracking.service
RUN tee -a /etc/sysdweb.conf <<EOF

[radiotracking]
title = RadioTracking
unit = radiotracking
EOF

# Enabling wait for time-sync.target (depending services will not start before the clock is synced)
RUN systemctl enable systemd-time-wait-sync.service

# Install and enable mosquitto
RUN apt-get install -y mosquitto mosquitto-clients
RUN systemctl enable mosquitto.service
RUN tee -a /etc/sysdweb.conf <<EOF

[Mosquitto]
title = Mosquitto
unit = mosquitto
EOF

# Install jupter
RUN apt-get install -y \
    jupyter \
    python3-pandas \
    python3-statsmodels
RUN python3 -m pip install --upgrade \
    plotly-express \
    ipywidgets
RUN systemctl enable jupyter-notebook.service
RUN tee -a /etc/sysdweb.conf <<EOF

[Jupyter Notebook]
title = Jupyter Notebook
unit = jupyter-notebook
EOF
