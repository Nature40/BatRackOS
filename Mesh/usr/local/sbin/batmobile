#!/usr/bin/env python3

import logging
import subprocess
import ping3
import math

logging.basicConfig(level=logging.DEBUG)
ping3.EXCEPTIONS = True

def _curl_to_bps(curlstr):
    num = curlstr[:-1]
    suffix = curlstr[-1]
    try:
        if suffix == 'k':
            return float(num) * (1024**1) * 8
        elif suffix == 'M':
            return float(num) * (1024**2) * 8
        elif suffix == 'G':
            return float(num) * (1024**3) * 8
        elif suffix == 'T':
            return float(num) * (1024**4) * 8
        else:
            return float(curlstr) * 8
    except ValueError:
        return curlstr
    

def _parse_curl(curl_output):
    out = curl_output.decode().splitlines()
    keys = out[0].split()

    vals = [_curl_to_bps(v) for v in out[-1].split()]

    return dict(zip(keys, vals))


def speedtest(bind_ip, filename="1MB.zip", url="ftp://speedtest.tele2.net/", upload="upload/speedtest.zip"):
    tmp_path = "speedtest.zip"

    down_cmd = ["curl", "-o", tmp_path, "--interface", bind_ip, url+filename]
    logging.debug(" ".join(down_cmd))
    down_p = subprocess.Popen(down_cmd, stderr=subprocess.PIPE)
    down_p.wait()
    _, stderr = down_p.communicate()
    down = _parse_curl(stderr)
    logging.info("Download finished with {} MBit/s.".format(down['Average']/1024/1024))


    up_cmd = ["curl", "-T", tmp_path, url+upload]
    logging.debug(" ".join(up_cmd))
    up_p = subprocess.Popen(up_cmd, stderr=subprocess.PIPE)
    up_p.wait()
    _, stderr = up_p.communicate()
    up = _parse_curl(stderr)
    logging.info("Upload finished with {} MBit/s.".format(up['Speed']/1024/1024))

    subprocess.check_output(["rm", tmp_path])

    return down['Average'], up['Speed']

def pingtest(bind_ip, dest="ds.mathematik.uni-marburg.de", count=4):
    ping_result = [ping3.ping(dest, src_addr=bind_ip) for _ in range(count)]
    return ping_result


class Route:
    def __init__(self, row):
        self.route = row.pop(0)
        self.download = 64 * 1024
        self.upload = 64 * 1024
        self.latency = math.inf
        self.dev = ""
        self.via = ""
        self.src = ""
        self.server = {}

        while len(row) > 1:
            self.__dict__[row.pop(0)] = row.pop(1)

    @property
    def speed(self):
        return self.download + self.upload


    def speedtest(self):
        self.download, self.upload = speedtest(self.src)

    def pingtest(self):
        self.latency = pingtest(self.src)


def kbits(bits):
    return int(bits / 1024)


def mbits(bits):
    return int(bits / 1024 / 1024)


def call(cmd):
    logging.info("$ "+" ".join(cmd))
    return subprocess.call(cmd)


if __name__ == "__main__":
    fastest = None
    for row in subprocess.check_output(["ip", "route"]).decode().splitlines():
        gateway = Route(row.split())
        if gateway.route != "default":
            continue

        if gateway.dev.startswith("bat"):
            logging.info("Ignoring mesh gateway via {}...".format(gateway.via))
            continue

        if gateway.src == "":
            logging.info("No src defined for gateway via {}, skipping...".format(gateway.via))
            continue
        
        gateway.pingtest()
        if (not fastest) or (fastest.latency > gateway.latency):
            fastest = gateway

    cmd = ["batctl", "gw_mode"]
    current = subprocess.check_output(cmd).decode().splitlines()[0].split()

    if fastest:
        logging.info("Gateway seems usable, switching to server mode.")
        # release dhcp
        if current[0] == "client":
            call(["dhclient", "-v", "-r", "bat0"])

        # set initial ip config / iptables rules
        call(["ifup", "--force", "bat0"])

        # announce server via batctl
        cmd.append("server")
        cmd.append("{}/{}".format(kbits(fastest.download), kbits(fastest.upload)))
        call(cmd)

    elif current[0] == "client":
        logging.info("Already in client mode, done.")
    else:
        logging.info("No gateway present, switching to client mode.")

        cmd.append("client")
        call(cmd)
        call(["dhclient", "-v", "bat0"])
